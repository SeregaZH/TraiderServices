/*
Deployment script for TraiderInformationService.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TraiderInformationService.Database"
:setvar DefaultFilePrefix "TraiderInformationService.Database"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[Claim]...';


GO
ALTER TABLE [dbo].[Claim] ALTER COLUMN [UpdatedBy] VARCHAR (200) NOT NULL;


GO
PRINT N'Altering [dbo].[ClaimType]...';


GO
ALTER TABLE [dbo].[ClaimType] ALTER COLUMN [UpdatedBy] VARCHAR (200) NOT NULL;


GO
PRINT N'Altering [dbo].[User]...';


GO
ALTER TABLE [dbo].[User] ALTER COLUMN [UpdatedBy] VARCHAR (200) NOT NULL;


GO
PRINT N'Altering [dbo].[UserInfo]...';


GO
ALTER TABLE [dbo].[UserInfo] ALTER COLUMN [UpdatedBy] VARCHAR (200) NOT NULL;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
BEGIN TRANSACTION;

BEGIN TRY

    INSERT INTO ClaimType (Id, TypeNumber, Name, UpdatedBy, UpdatedDate) 
    VALUES ('286812E9-FE15-4374-84CB-C005834CBFB0', 1, 'Login', SYSTEM_USER, GETDATE())

    INSERT INTO ClaimType (Id, TypeNumber, Name, UpdatedBy, UpdatedDate) 
    VALUES ('7487FDB5-D1E0-4467-A12C-E3E1EE688083', 2, 'Password', SYSTEM_USER, GETDATE())

    INSERT INTO ClaimType (Id, TypeNumber, Name, UpdatedBy, UpdatedDate) 
    VALUES ('D37A68F7-73F9-4D21-A8BC-B3C55DE2C59A', 3, 'Email', SYSTEM_USER, GETDATE())

    INSERT INTO ClaimType (Id, TypeNumber, Name, UpdatedBy, UpdatedDate) 
    VALUES ('AF958598-C43E-410A-AE7B-69D957A32D90', 4, 'FirstName', SYSTEM_USER, GETDATE())

    INSERT INTO ClaimType (Id, TypeNumber, Name, UpdatedBy, UpdatedDate) 
    VALUES ('9C9A570D-61EB-4D1C-8C85-A5FFC5F6E2B5', 5, 'LastName', SYSTEM_USER, GETDATE())

END TRY
BEGIN CATCH
     SELECT 
        ERROR_NUMBER() AS ErrorNumber
        ,ERROR_SEVERITY() AS ErrorSeverity
        ,ERROR_STATE() AS ErrorState
        ,ERROR_PROCEDURE() AS ErrorProcedure
        ,ERROR_LINE() AS ErrorLine
        ,ERROR_MESSAGE() AS ErrorMessage;
	 
	 IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
    COMMIT TRANSACTION;
GO

GO
PRINT N'Update complete.';


GO
